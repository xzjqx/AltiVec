// 
// ************************************************************************** 
// 
//  Copyright (c) International Business Machines Corporation, 2005. 
// 
//  This file contains trade secrets and other proprietary and confidential 
//  information of International Business Machines Corporation which are 
//  protected by copyright and other intellectual property rights and shall 
//  not be reproduced, transferred to other documents, disclosed to others, 
//  or used for any purpose except as specifically authorized in writing by 
//  International Business Machines Corporation. This notice must be 
//  contained as part of this text at all times. 
// 
// ************************************************************************** 
//
//  from espresso format file on Wed May 12 16:13:37 EDT 1999
// modulename is dcdPla
// input file is dcdPla.pers
// output file is dcdPla.v
// espresso will be called.
// ##########################
// #                        #
// #  dcdPla  personality   #
// #                        #
// ##########################
//
// # the types are:
// #.f    ones=1 , zero= comp ones, dcs = null
// #        this is like a regular PLA
// #.fd   dcs = -, ones = 1 without -, zero = comp(dcs union ones)
// #        all unlisted input combinations produce a 0 output
// #        note that if an output is covered by both a - and 1, it is -
// #.fr   ones = 1, zero=0, dcs= comp(ones union zero)
// #        all unlisted input combinations are don't cares
// #        note that if an output is covered by both a 0 and 1, it is error
// #.fdr  ones = 1, zero=0, dcs=-
// #        all unlisted input combinations are ?
// #        does not say what happens if overlapping covers
// #
// .outputnames plaApuLdSt plaMac plaVal plaPriv plaRaEq0Ck NplaApRdEn NplaBpRdEn plaSpRdEn plaLpWrEn plaRpWrEn plaRpMuxSel
// .outputnames plaLitCntl[0:4] plaBpLitGenSel plaCmplmntA NplaAregEn NplaBregEn NplaSregEn plaSrmEn plaSrmMuxSel[0:2]
// .outputnames plaUnitEn[0:4] plaAdmCntl[0:3] plaLogicalCntl[0:7] plaSrmCntl[0:3] plaEaCalc plaAddEn plaLSSMIURA[0:7] plaByteCnt[0:4]
// .outputnames plaIcuOp[0:3] plaDcuOp[0:11] plaMmuCode[0:6] PCL_dcdHotCIn PCL_dcdXerCa plaOeCk plaXerCaEn plaMtspr plaMfspr plaMtdcr plaMfdcr
// .outputnames plaWrExtEn plaWrtee accTyp plaLwarx plaStwcx plaMrSel plaMdSel plaNegMac plaGateZeroToAccReg plaMacSat plaForceAlgn plaApuDiv
// .outputnames plaMtcrf
// .inputnames priOp[0:5] sprMsb secOp[21:31] pgmEn[0:1]
// .type fd
// .i 20
// .o 105
// # History:
// # 03/12/98 SBP Created.
// # 01/08/99 SBP Changed the Secondary Opcode of machhws instr from 118 to 108.
// # 01/08/99 SBP Changed the mdMuxSel and mrMuxSel for mulchw mulchwu. reversed the value.
// # 01/16/99 SBP Added floating point load/store instruction. Added plaApuLdSt output and expanded plaByteCnt 3 bits to 5 bits .
// # 03/05/99 SBP Added VMX load/store instruction. Added plaForceAlgn output.
// # 03/15/99 SBP Added plaApuDiv output.
// # 04/01/99 SBP Added plaMtcrf output.
// # 04/07/99 SBP Added 2 bit to plaLogicalCntl to replace logical mux to AO2222 for LSSD.
// # 04/28/99 SBP Change the MMU access check from 01110 01100 for dcba insrt.
// # 05/12/99 SBP Don't care OE check for 16 bit mult instr.
// #
// #
// #  NOTE 1) The OE ck bit is don't cared on those instructions which do not want to change overflow
// #          and are guarenteed to have a zero in bit 21.
// #
// #  NOTE 2) aPort, bPort, aReg, bReg enables are active low to allow unspecified (illegals) instructions to read the gpr's and
// #          load that a and b regs. This was done to support the Coprocessor Interface.
// #
// #  NOTE 3) pgmEn[0] = 0 Internal divide enabled, = 1 treated as illegal unless APU reponds with validOp.
// #          pgmEn[1] = 0 mmu specific instructions are treated as illegal, = 1 mmu instructions are valid.
// #
// #  NOTE 4) The accTyp signal is the MMU access type and is refered to as plaLdNotSt outside the pla.
// #          This signal is a "1" for: all loads, dcread, dcbf, dcbst, dcbt, dcbtst, icbt, icbi, iccci, and icread.
// #                           "0" for: all stores, dcbi, dccci, and dcbz.
// #                           "-" for: all others.
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D c
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// #MAC Instructions
// # machhwu  RT,RA,RB  PRI = 4  SEC = 12
// 000100  -  -000001100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 1 0 0 0 0 0 0
// # machhw   RT,RA,RB  PRI = 4  SEC = 44
// 000100  -  -000101100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 1 0 0 0 0 0 0
// # machhwsu RT,RA,RB  PRI = 4  SEC = 76
// 000100  -  -001001100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 1 0 0 1 0 0 0
// # machhws  RT,RA,RB  PRI = 4  SEC = 108
// 000100  -  -001101100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 1 0 0 1 0 0 0
// # maclhwu  RT,RA,RB  PRI = 4  SEC = 396
// 000100  -  -110001100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # maclhw   RT,RA,RB  PRI = 4  SEC = 428
// 000100  -  -110101100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # maclhwsu RT,RA,RB  PRI = 4  SEC = 460
// 000100  -  -111001100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  0 0 0 0 1 0 0 0
// # maclhws  RT,RA,RB  PRI = 4  SEC = 492
// 000100  -  -111101100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  0 0 0 0 1 0 0 0
// # macchwu  RT,RA,RB  PRI = 4  SEC = 140
// 000100  -  -010001100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 0 0 0 0 0 0 0
// # macchw   RT,RA,RB  PRI = 4  SEC = 172
// 000100  -  -010101100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 0 0 0 0 0 0 0
// # macchwsu RT,RA,RB  PRI = 4  SEC = 204
// 000100  -  -011001100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 0 0 0 1 0 0 0
// # macchws  RT,RA,RB  PRI = 4  SEC = 236
// 000100  -  -011101100-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 0 0 0 1 0 0 0
// # mulhhwu  RT,RA,RB  PRI = 4  SEC = 8
// 000100  -  0000001000-  --    0  1  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  -  0  00  00  00   -  0  0  1 1 0 1 0 0 0 0
// # mulhhw   RT,RA,RB  PRI = 4  SEC = 40
// 000100  -  0000101000-  --    0  1  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  -  0  00  00  00   -  0  0  1 1 0 1 0 0 0 0
// # mullhwu  RT,RA,RB  PRI = 4  SEC = 392
// 000100  -  0110001000-  --    0  1  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  -  0  00  00  00   -  0  0  0 0 0 1 0 0 0 0
// # mullhw   RT,RA,RB  PRI = 4  SEC = 424
// 000100  -  0110101000-  --    0  1  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  -  0  00  00  00   -  0  0  0 0 0 1 0 0 0 0
// # mulchwu  RT,RA,RB  PRI = 4  SEC = 136
// 000100  -  0010001000-  --    0  1  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  0000  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  -  0  00  00  00   -  0  0  1 0 0 1 0 0 0 0
// # mulchw   RT,RA,RB  PRI = 4  SEC = 168
// 000100  -  0010101000-  --    0  1  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  -  0  00  00  00   -  0  0  1 0 0 1 0 0 0 0
// # nmachhw  RT,RA,RB  PRI = 4  SEC = 46
// 000100  -  -000101110-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 1 1 0 0 0 0 0
// # nmaclhw  RT,RA,RB  PRI = 4  SEC = 430
// 000100  -  -110101110-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  0 0 1 0 0 0 0 0
// # nmacchw  RT,RA,RB  PRI = 4  SEC = 174
// 000100  -  -010101110-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 0 1 0 0 0 0 0
// # nmachhws RT,RA,RB  PRI = 4  SEC = 110
// 000100  -  -001101110-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 1 1 0 1 0 0 0
// # nmaclhws RT,RA,RB  PRI = 4  SEC = 494
// 000100  -  -111101110-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  0 0 1 0 1 0 0 0
// # nmacchws RT,RA,RB  PRI = 4  SEC = 238
// 000100  -  -011101110-  --    0  1  1  0  0  0  0  1  0  1  0  -----  0  0  0  0  0  0  ---  00000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  -  1  0  00  00  00   -  0  0  1 0 1 0 1 0 0 0
// #
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// #Fixed Point Arithmetic Instructions
// #   addi   RT,RA.SI  PRI = 14 SEC = None
// 001110  -  -----------  --    0  0  1  0  1  0  1  0  0  1  0  10000  1  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   addis  RT,RA,SI  PRI = 15 SEC = None
// 001111  -  -----------  --    0  0  1  0  1  0  1  0  0  1  0  11100  1  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   add    RT,RA,RB  PRI = 31 SEC = 266
// 011111  -  -100001010-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  0  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   subf   RT,RA,RB  PRI = 31 SEC =  40
// 011111  -  -000101000-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   addic  RT,RA,SI  PRI = 12 SEC = None
// 001100  -  -----------  --    0  0  1  0  0  0  1  0  0  1  0  10000  1  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  0  0  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   addic. RT,RA,SI  PRI = 13 SEC = None
// 001101  -  -----------  --    0  0  1  0  0  0  1  0  0  1  0  10000  1  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  0  0  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   subfic RT,RA,SI  PRI =  8 SEC = None
// 001000  -  -----------  --    0  0  1  0  0  0  1  0  0  1  0  10000  1  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  0  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   addc   RT,RA,RB  PRI = 31 SEC =  10
// 011111  -  -000001010-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  0  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   subfc  RT,RA,RB  PRI = 31 SEC =   8
// 011111  -  -000001000-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   adde   RT,RA,RB  PRI = 31 SEC = 138
// 011111  -  -010001010-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  1  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   subfe  RT,RA,RB  PRI = 31 SEC = 136
// 011111  -  -010001000-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  1  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   addme  RT,RA     PRI = 31 SEC = 234
// 011111  -  -011101010-  --    0  0  1  0  0  0  1  0  0  1  0  01011  1  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  1  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   subfme RT,RA     PRI = 31 SEC = 232
// 011111  -  -011101000-  --    0  0  1  0  0  0  1  0  0  1  0  01011  1  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  1  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   addze  RT,RA     PRI = 31 SEC = 202
// 011111  -  -011001010-  --    0  0  1  0  0  0  1  0  0  1  0  00100  1  0  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  1  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   subfze RT,RA     PRI = 31 SEC = 200
// 011111  -  -011001000-  --    0  0  1  0  0  0  1  0  0  1  0  00100  1  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  0  1  1  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   neg    RT,RA     PRI = 31 SEC = 104
// 011111  -  -001101000-  --    0  0  1  0  0  0  1  0  0  1  0  00100  1  1  0  0  1  0  ---  00000  001-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mulli  RT,RA,SI  PRI =  7 SEC = None
// 000111  -  -----------  --    0  0  1  0  0  0  1  0  0  1  0  10000  1  0  0  0  1  0  ---  10000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 1 0 0 0 0
// #   mullw  RT,RA,RB  PRI = 31 SEC = 235
// 011111  -  -011101011-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  10000  0010  --------  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  1  0  00  00  00   -  0  0  0 0 0 1 0 0 0 0
// #   mulhw  RT,RA,RB  PRI = 31 SEC =  75
// 011111  -  0001001011-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  10000  0011  --------  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 1 0 0 0 0
// #   mulhwu RT,RA,RB  PRI = 31 SEC =  11
// 011111  -  0000001011-  --    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  10000  0001  --------  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 1 0 0 0 0
// #   divw   RT,RA,RB  PRI = 31 SEC = 491
// 011111  -  -111101011-  0-    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  01000  001-  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   divwu  RT,RA,RB  PRI = 31 SEC = 459
// 011111  -  -111001011-  0-    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  01000  000-  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  1  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// # APU performed divs. Operands are loaded ed into Areg and Breg, ens are off.
// #   divw   RT,RA,RB  PRI = 31 SEC = 491
// 011111  -  -111101011-  1-    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  1  0  00  00  00   -  0  0  0 0 0 0 0 0 1 0
// #   divwu  RT,RA,RB  PRI = 31 SEC = 459
// 011111  -  -111001011-  1-    0  0  1  0  0  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  1  0  00  00  00   -  0  0  0 0 0 0 0 0 1 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Fixed Point Compare Instruction
// #   cmpwi  BF,RA,SI  PRI = 11 SEC = None
// 001011  -  -----------  --    0  0  1  0  0  0  1  0  0  0  -  10000  1  1  0  0  1  0  ---  00000  101-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   cmpw   BF,RA,RB  PRI = 31 SEC =   0
// 011111  -  0000000000-  --    0  0  1  0  0  0  0  0  0  0  -  -----  0  1  0  0  1  0  ---  00000  101-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   cmplwi BF,RA,UI  PRI = 10 SEC = None
// 001010  -  -----------  --    0  0  1  0  0  0  1  0  0  0  -  00000  1  1  0  0  1  0  ---  00000  100-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   cmplw  BF,RA,RB  PRI = 31 SEC =  32
// 011111  -  0000100000-  --    0  0  1  0  0  0  0  0  0  0  -  -----  0  1  0  0  1  0  ---  00000  100-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # Fixed Point Trap Instructions
// #   twi    TO,RA,SI  PRI =  3 SEC = None
// 000011  -  -----------  --    0  0  1  0  0  0  1  1  0  0  0  10000  1  1  0  0  1  0  ---  00000  011-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   tw     TO,RA,RB  PRI = 31 SEC =   4
// 011111  -  0000000100-  --    0  0  1  0  0  0  0  1  0  0  0  -----  0  1  0  0  1  0  ---  00000  011-  --------  ----  0  1  00------  -----  0000  000000000000  0000000  1  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # Fixed Point Logical Instruction
// #   andi.  RA,RS,UI  PRI = 28 SEC = None
// 011100  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  00000  1  0  0  0  1  0  ---  00100  ----  01000100  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   andis. RA,RS,UI  PRI = 29 SEC = None
// 011101  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  11100  1  0  0  0  1  0  ---  00100  ----  01000100  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   ori    RA,RS,UI  PRI = 24 SEC = None
// 011000  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  00000  1  0  0  0  1  0  ---  00100  ----  00001000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   oris   RA,RS,UI  PRI = 25 SEC = None
// 011001  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  11100  1  0  0  0  1  0  ---  00100  ----  00001000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   xori   RA,RS,UI  PRI = 26 SEC = None
// 011010  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  00000  1  0  0  0  1  0  ---  00100  ----  01010000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   xoris  RA,RS,UI  PRI = 27 SEC = None
// 011011  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  11100  1  0  0  0  1  0  ---  00100  ----  01010000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   and    RA,RS,RB  PRI = 31 SEC =  28
// 011111  -  0000011100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  01000100  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   or     RA,RS,RB  PRI = 31 SEC = 444
// 011111  -  0110111100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  00001000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   xor    RA,RS,RB  PRI = 31 SEC = 316
// 011111  -  0100111100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  01010000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   nand   RA,RS,RB  PRI = 31 SEC = 476
// 011111  -  0111011100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  00000100  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   nor    RA,RS,RB  PRI = 31 SEC = 124
// 011111  -  0001111100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  01001000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   eqv    RA,RS,RB  PRI = 31 SEC = 284
// 011111  -  0100011100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  00010000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   andc   RA,RS,RB  PRI = 31 SEC =  60
// 011111  -  0000111100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  1  0  0  1  0  ---  00100  ----  11000100  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   orc    RA,RS,RB  PRI = 31 SEC = 412
// 011111  -  0110011100-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  1  0  0  1  0  ---  00100  ----  10001000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   extsb  RA,RS     PRI = 31 SEC = 954
// 011111  -  1110111010-  --    0  0  1  0  0  0  1  0  0  1  1  00100  1  0  0  0  1  0  ---  00100  ----  ------10  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   extsh  RA,RS     PRI = 31 SEC = 922
// 011111  -  1110011010-  --    0  0  1  0  0  0  1  0  0  1  1  00100  1  0  0  0  1  0  ---  00100  ----  -1100000  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   cntlzw RA,RS     PRI = 31 SEC =  26
// 011111  -  0000011010-  --    0  0  1  0  0  0  1  0  0  1  1  00100  1  0  0  0  1  0  ---  00100  ----  ------01  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   dlmzb  RA,RS,RB  PRI = 31 SEC =  78
// 011111  -  0001001110-  --    0  0  1  0  0  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00100  ----  ------11  ----  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Fixed Point Rotate and Shift Instructions
// # rlwinm RA,RS,SH,MB,ME PRI = 21 SEC = None
// 010101  -  -----------  --    0  0  1  0  0  0  1  0  0  1  1  --000  0  0  0  0  1  1  000  00010  ----  --------  0000  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # rlwnm  RA,RS,RB,MB,ME PRI = 23 SEC = None
// 010111  -  -----------  --    0  0  1  0  0  0  0  0  0  1  1  --000  0  0  0  0  1  1  100  00010  ----  --------  0000  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # rlwimi RA,RS,SH,MB,ME PRI = 20 SEC = None
// 010100  -  -----------  --    0  0  1  0  0  0  0  0  0  1  1  --000  0  0  0  0  1  1  000  00010  ----  --------  1000  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # slw    RA,RS,RB       PRI = 31 SEC =  24
// 011111  -  0000011000-  --    0  0  1  0  0  0  0  0  0  1  1  --100  0  0  0  0  1  1  101  00010  ----  --------  0100  0  0  00------  -----  0000  000000000000  0000000  -  -  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # srw    RA,RS,RB       PRI = 31 SEC = 536
// 011111  -  1000011000-  --    0  0  1  0  0  0  0  0  0  1  1  --011  0  0  0  0  1  1  110  00010  ----  --------  0010  0  0  00------  -----  0000  000000000000  0000000  -  -  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # srawi  RA,RS,SH       PRI = 31 SEC = 824
// 011111  -  1100111000-  --    0  0  1  0  0  0  1  0  0  1  1  00010  0  0  0  0  1  1  000  00010  ----  --------  0011  0  0  00------  -----  0000  000000000000  0000000  -  -  0  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # sraw   RA,RS,RB       PRI = 31 SEC = 792
// 011111  -  1100011000-  --    0  0  1  0  0  0  0  0  0  1  1  --011  0  0  0  0  1  1  110  00010  ----  --------  0011  0  0  00------  -----  0000  000000000000  0000000  -  -  0  1  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// # CR Logical Instructions
// #   crand  BT,BA,BB  PRI = 19 SEC = 257
// 010011  -  0100000001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   cror   BT,BA,BB  PRI = 19 SEC = 449
// 010011  -  0111000001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   crxor  BT,BA,BB  PRI = 19 SEC = 193
// 010011  -  0011000001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   crnand BT,BA,BB  PRI = 19 SEC = 225
// 010011  -  0011100001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   crnor  BT,BA,BB  PRI = 19 SEC =  33
// 010011  -  0000100001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   creqv  BT,BA,BB  PRI = 19 SEC = 289
// 010011  -  0100100001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   crandc BT,BA,BB  PRI = 19 SEC = 129
// 010011  -  0010000001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   crorc  BT,BA,BB  PRI = 19 SEC = 417
// 010011  -  0110100001-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mcrf   BF,BFA    PRI = 19 SEC =   0
// 010011  -  0000000000-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Fixed Point Load Instructions
// #   lbz   RT,D(RA)   PRI = 34 SEC = None
// 100010  -  -----------  --    0  0  1  0  1  0  1  0  1  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  10000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lbzu  RT,D(RA)   PRI = 35 SEC = None
// 100011  -  -----------  --    0  0  1  0  1  0  1  0  1  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  10000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lbzx  RT,RA,RB   PRI = 31 SEC =  87
// 011111  -  0001010111-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  10000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lbzux RT,RA,RB   PRI = 31 SEC = 119
// 011111  -  0001110111-  --    0  0  1  0  1  0  0  0  1  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  10000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhz   RT,D(RA)   PRI = 40 SEC = None
// 101000  -  -----------  --    0  0  1  0  1  0  1  0  1  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  01000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhzu  RT,D(RA)   PRI = 41 SEC = None
// 101001  -  -----------  --    0  0  1  0  1  0  1  0  1  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  01000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhzx  RT,RA,RB   PRI = 31 SEC = 279
// 011111  -  0100010111-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  01000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhzux RT,RA,RB   PRI = 31 SEC = 311
// 011111  -  0100110111-  --    0  0  1  0  1  0  0  0  1  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  01000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lha   RT,D(RA)   PRI = 42 SEC = None
// 101010  -  -----------  --    0  0  1  0  1  0  1  0  1  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-001  01000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhau  RT,D(RA)   PRI = 43 SEC = None
// 101011  -  -----------  --    0  0  1  0  1  0  1  0  1  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-101  01000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhax  RT,RA,RB   PRI = 31 SEC = 343
// 011111  -  0101010111-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-001  01000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lhaux RT,RA,RB   PRI = 31 SEC = 375
// 011111  -  0101110111-  --    0  0  1  0  1  0  0  0  1  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-101  01000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lwz   RT,D(RA)   PRI = 32 SEC = None
// 100000  -  -----------  --    0  0  1  0  1  0  1  0  1  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00100  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lwzu  RT,D(RA)   PRI = 33 SEC = None
// 100001  -  -----------  --    0  0  1  0  1  0  1  0  1  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  00100  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lwzx  RT,RA,RB   PRI = 31 SEC =  23
// 011111  -  0000010111-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00100  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lwzux RT,RA,RB   PRI = 31 SEC =  55
// 011111  -  0000110111-  --    0  0  1  0  1  0  0  0  1  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  00100  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #
// # Fixed Point Store Instructions
// #   stb   RS,D(RA)   PRI = 38 SEC = None
// 100110  -  -----------  --    0  0  1  0  1  0  1  1  0  0  -  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  10000  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stbu  RS,D(RA)   PRI = 39 SEC = None
// 100111  -  -----------  --    0  0  1  0  1  0  1  1  0  1  1  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-100  10000  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stbx  RS,RA,RB   PRI = 31 SEC = 215
// 011111  -  0011010111-  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  10000  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stbux RS,RA,RB   PRI = 31 SEC = 247
// 011111  -  0011110111-  --    0  0  1  0  1  0  0  1  0  1  1  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-100  10000  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   sth   RS,D(RA)   PRI = 44 SEC = None
// 101100  -  -----------  --    0  0  1  0  1  0  1  1  0  0  -  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  01000  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   sthu  RS,D(RA)   PRI = 45 SEC = None
// 101101  -  -----------  --    0  0  1  0  1  0  1  1  0  1  1  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-100  01000  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   sthx  RS,RA,RB   PRI = 31 SEC = 407
// 011111  -  0110010111-  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  01000  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   sthux RS,RA,RB   PRI = 31 SEC = 439
// 011111  -  0110110111-  --    0  0  1  0  1  0  0  1  0  1  1  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-100  01000  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stw   RS,D(RA)   PRI = 36 SEC = None
// 100100  -  -----------  --    0  0  1  0  1  0  1  1  0  0  -  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stwu  RS,D(RA)   PRI = 37 SEC = None
// 100101  -  -----------  --    0  0  1  0  1  0  1  1  0  1  1  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-100  00100  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stwx  RS,RA,RB   PRI = 31 SEC = 151
// 011111  -  0010010111-  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stwux RS,RA,RB   PRI = 31 SEC = 183
// 011111  -  0010110111-  --    0  0  1  0  1  0  0  1  0  1  1  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-100  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Fixed Point Load and Store with Byte Reversal
// #   lhbrx  RT,RA,RB  PRI = 31 SEC = 790
// 011111  -  1100010110-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  1000-010  01000  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lwbrx  RT,RA,RB  PRI = 31 SEC = 534
// 011111  -  1000010110-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  1000-010  00100  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   sthbrx RS,RA,RB  PRI = 31 SEC = 918
// 011111  -  1110010110-  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-010  01000  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stwbrx RS,RA,RB  PRI = 31 SEC = 662
// 011111  -  1010010110-  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-010  00100  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #
// # Fixed Point Load and Store Multiple Instructions
// #   lmw  RT,D(RA)    PRI = 46 SEC = None
// 101110  -  -----------  --    0  0  1  0  1  0  1  0  1  0  -  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  1001-000  -----  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   stmw RS,D(RA)    PRI = 47 SEC = None
// 101111  -  -----------  --    0  0  1  0  1  0  1  1  0  0  -  10000  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0101-000  -----  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #
// # Fixed Point Move Assist Instructions
// #   lswi  RT,RA,NB   PRI = 31 SEC = 597
// 011111  -  1001010101-  --    0  0  1  0  1  0  1  0  1  0  -  00100  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  10100000  -----  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lswx  RT,RA,RB   PRI = 31 SEC = 533
// 011111  -  1000010101-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  10101000  -----  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   stswi RS,RA,NB   PRI = 31 SEC = 725
// 011111  -  1011010101-  --    0  0  1  0  1  0  1  1  0  0  -  00100  1  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  01100000  -----  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stswx RS,RA,RB   PRI = 31 SEC = 661
// 011111  -  1010010101-  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  01101000  -----  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #
// # Storage Synchronization Instructions
// #   lwarx  RT,RA,RB  PRI = 31 SEC =  20
// 011111  -  0000010100-  --    0  0  1  0  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00100  0000  110000000000  0111000  0  0  -  0  00  00  00   1  1  0  0 0 0 0 0 0 0 0
// #   stwcx. RS,RA,RB  PRI = 31 SEC = 150
// 011111  -  00100101101  --    0  0  1  0  1  0  0  1  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  1  0 0 0 0 0 0 0 0
// #   sync             PRI = 31 SEC = 598
// 011111  -  1001010110-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  100000000001  0000000  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Miscellaneous Instructions
// #   mtcrf  FXM,RS    PRI = 31 SEC = 144
// 011111  -  0010010000-  --    0  0  1  0  0  0  1  0  0  0  -  --100  1  0  0  0  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 1
// #   mfcr   RT        PRI = 31 SEC =  19
// 011111  -  0000010011-  --    0  0  1  0  -  1  1  0  0  1  0  --100  1  -  1  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  01  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mcrxr  BF        PRI = 31 SEC = 512
// 011111  -  1000000000-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mfspr  RT,SPR    PRI = 31 SEC = 339,371(to make look like mftb, as well)
// 011111  0  0101-10011-  --    0  0  1  0  -  1  1  0  0  1  0  --001  1  -  1  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  01  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mtspr  SPR,RS    PRI = 31 SEC = 467
// 011111  0  0111010011-  --    0  0  1  0  0  0  1  0  0  0  -  --001  1  0  0  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  10  00  00   -  0  0  0 0 0 0 0 0 0 0
// # priv mfspr RT,SPR  PRI = 31 SEC = 339,371(to make look like mftb priv, as well)
// 011111  1  0101-10011-  --    0  0  1  1  -  1  1  0  0  1  0  --001  1  -  1  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  01  00  00   -  0  0  0 0 0 0 0 0 0 0
// # priv mtspr SPR,RS  PRI = 31 SEC = 467
// 011111  1  0111010011-  --    0  0  1  1  0  0  1  0  0  0  -  --001  1  0  0  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  10  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mfdcr  RT,DCR    PRI = 31 SEC = 323
// 011111  -  0101000011-  --    0  0  1  1  -  1  1  0  0  1  0  --001  1  -  1  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  01  00   -  0  0  0 0 0 0 0 0 0 0
// #   mtdcr  DCR,RS    PRI = 31 SEC = 451
// 011111  -  0111000011-  --    0  0  1  1  0  0  1  0  0  0  -  --001  1  0  0  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  10  00   -  0  0  0 0 0 0 0 0 0 0
// #   mfmsr  RT        PRI = 31 SEC = 339
// 011111  -  0001010011-  --    0  0  1  1  -  1  1  0  0  1  0  --101  1  -  1  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  01  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   mtmsr  RS        PRI = 31 SEC = 467
// 011111  -  0010010010-  --    0  0  1  1  0  0  1  0  0  0  -  --101  1  0  0  0  1  0  ---  00001  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  10  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// #  system call
// #   sc               PRI = 17 SEC =   1
// 010001  -  ---------1-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// # Interrupt Control Instructions
// #   rfi              PRI = 19 SEC =  50
// 010011  -  0000110010-  --    0  0  1  1  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   rfci             PRI = 19 SEC =  51
// 010011  -  0000110011-  --    0  0  1  1  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   wrtee  RS        PRI = 31 SEC = 131
// 011111  -  0010000011-  --    0  0  1  1  -  0  1  0  0  0  -  -----  0  -  0  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  11   -  0  0  0 0 0 0 0 0 0 0
// #   wrteei E         PRI = 31 SEC = 163
// 011111  -  0010100011-  --    0  0  1  1  -  1  1  0  0  0  -  --000  1  -  1  0  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  10   -  0  0  0 0 0 0 0 0 0 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | p  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Storage Control Instructions
// #   eieio            PRI = 31 SEC = 854
// 011111  -  1101010110-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  100000000001  0000000  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   isync            PRI = 19 SEC = 150
// 010011  -  0010010110-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #   dcbtst RA,RB     PRI = 31 SEC = 246
// 011111  -  0011110110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100100000000  0110000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   dcbt   RA,RB     PRI = 31 SEC = 278
// 011111  -  0100010110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100100000000  0110000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   dcbz   RA,RB  PRI = 31  SEC =1014
// 011111  -  1111110110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100010000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   dcba   RA,RB  PRI = 31  SEC =758
// 011111  -  1011110110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  0  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100001000000  0110000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   dcbf   RA,RB     PRI = 31 SEC =  86
// 011111  -  0001010110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100000100000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   dcbst  RA,RB     PRI = 31 SEC =  54
// 011111  -  0000110110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100000010000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   dcbi   RA,RB     PRI = 31 SEC = 470
// 011111  -  0111010110-  --    0  0  1  1  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100000001000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   dccci  RA,RB     PRI = 31 SEC = 454
// 011111  -  0111000110-  --    0  0  1  1  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  0000  100000000100  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   dcread RT,RA,RB  PRI = 31 SEC = 486
// 011111  -  0111100110-  --    0  0  1  1  1  0  0  0  1  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000----  00100  0000  100000000010  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   icbt   RA,RB     PRI = 31 1EC = 262
// 011111  -  0100000110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  1001  000000000000  0110000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   icbi   RA,RB     PRI = 31 SEC = 982
// 011111  -  1111010110-  --    0  0  1  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  1010  000000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   iccci  RA,RB     PRI = 31 SEC = 965
// 011111  -  1111000110-  --    0  0  1  1  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  1011  000000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   icread RA,RB     PRI = 31 SEC = 998
// 011111  -  1111100110-  --    0  0  1  1  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0000----  10000  1100  000000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #
// # TLB instructions
// # tlbia              PRI = 31 SEC = 370
// 011111  -  0101110010-  -1    0  0  1  1  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  1000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # tlbsx(.) RT,RA,RB  PRI = 31 SEC = 914
// 011111  -  1110010010-  -1    0  0  1  1  1  0  0  0  0  1  0  -----  0  0  0  0  1  0  ---  00001  00--  --------  ----  1  0  00------  10000  0000  000000000000  0000001  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # tlbre              PRI = 31 SEC = 946
// 011111  -  1110110010-  -1    0  0  1  1  -  1  0  0  0  1  0  -----  0  -  1  0  1  -  ---  00001  ----  --------  ----  0  0  --------  -----  0000  000000000000  0000100  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # tlbwe              PRI = 31 SEC = 978
// 011111  -  1111010010-  -1    0  0  1  1  0  0  0  0  0  0  -  -----  0  -  0  0  1  -  ---  00001  ----  --------  ----  0  0  --------  -----  0000  000000000000  0000010  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # tlbsync            PRI = 31 SEC = 566
// 011111  -  1000110110-  -1    0  0  1  1  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0100000  0  0  0  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// # Branches
// # b                  PRI = 18 SEC = None
// 010010  -  -----------  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # bc                 PRI = 16 SEC = None
// 010000  -  -----------  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # bclr               PRI = 19 SEC =  16
// 010011  -  0000010000-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// # bcctr              PRI = 19 SEC = 528
// 010011  -  1000010000-  --    0  0  1  0  -  1  1  0  0  0  -  -----  -  -  1  1  1  0  ---  00000  ----  --------  ----  0  0  00------  -----  0000  000000000000  0000000  0  0  -  0  00  00  00   -  0  0  0 0 0 0 0 0 0 0
// #
// #
// #--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  N  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # Float Point Load and Store Instructions
// #   lfs    FRT,D(RA) PRI = 48 SEC = None
// 110000  -  -----------  --    1  0  0  0  1  0  1  0  0  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00100  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfsx   FRT,RA,RB PRI = 31 SEC = 535
// 011111  -  1000010111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00100  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfsu   FRT,D(RA) PRI = 49 SEC = None
// 110001  -  -----------  --    1  0  0  0  1  0  1  0  0  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  00100  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfsux  FRT,RA,RB PRI = 31 SEC = 567
// 011111  -  1000110111-  --    1  0  0  0  1  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  00100  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfd    FRT,D(RA) PRI = 50 SEC = None
// 110010  -  -----------  --    1  0  0  0  1  0  1  0  0  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00010  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfdx   FRT,RA,RB PRI = 31 SEC = 599
// 011111  -  1001010111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00010  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfdu   FRT,D(RA) PRI = 51 SEC = None
// 110011  -  -----------  --    1  0  0  0  1  0  1  0  0  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  00010  0000  110000000000  0111000  0  0  0  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lfdux  FRT,RA,RB PRI = 31 SEC = 631
// 011111  -  1001110111-  --    1  0  0  0  1  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-100  00010  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   stfs   FRS,D(RA) PRI = 52 SEC = None
// 110100  -  -----------  --    1  0  0  0  1  0  1  0  0  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfsx  FRS,RA,RB PRI = 31 SEC = 663
// 011111  -  1010010111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfsu  FRS,D(RA) PRI = 53 SEC = None
// 110101  -  -----------  --    1  0  0  0  1  0  1  0  0  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-100  00100  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfsux FRS,RA,RB PRI = 31 SEC = 695
// 011111  -  1010110111-  --    1  0  0  0  1  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-100  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfd   FRS,D(RA) PRI = 54 SEC = None
// 110110  -  -----------  --    1  0  0  0  1  0  1  0  0  0  -  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00010  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfdx  FRS,RA,RB PRI = 31 SEC = 727
// 011111  -  1011010111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00010  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfdu  FRS,D(RA) PRI = 55 SEC = None
// 110111  -  -----------  --    1  0  0  0  1  0  1  0  0  1  1  10000  1  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-100  00010  0000  101000000000  0111000  0  0  0  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfdux FRS,RA,RB PRI = 31 SEC = 759
// 011111  -  1011110111-  --    1  0  0  0  1  0  0  0  0  1  1  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-100  00010  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stfiwx FRS,RA,RB PRI = 31 SEC = 983
// 011111  -  1111010111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #
// #
// #---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// #  INPUTS                   |             OUTPUTS
// #                           |                                                                                                                                                 C In
// #                           |                                            c                                                     Load                                           Cntl                                        F
// #                           |                                            o                                                     Store                                           __                                     Z   o
// #                           |                                            m                                                     String                                         |  |                W                   e   r
// #                           |                                            p                                                     Multiple                                       v  v                r                 N r M c A
// #                           |                                            l                                                EA   Index Stg                                 TLB  H  X     X          EW      L  S  M M e o a e p m
// #                           |          P  RA AP BP SP LP RPort lit    BP m  A  B  S                 Adm   logical   SRM   C  A Update                                    RE   o  e     e          xr      w  t  r d g 2 c A u t
// #                           | A  M     r  Eq Rd Rd Rd Wr Wr Ad gen    Lt n RegRegReg srmReg  Unit   Cntl  Cntl      Cntl  a  D Rev Byte   Byte   icu   dcu           MMU WRE  t  r     r          tt      a  w  S S M A S l D C
// #Op    spr ExtOp     R  En  | p  a Dcd i  0  En En En En En Mx abxyz  Mx t  En En En En Mux  En     Bus   Bus       Bus   l  D Algebraic  Cnt 1   Op    Op       11   Op SX   C  Ca OE Ca spr dcr Ee  Acc r  c  e e a c a g i r
// #I0-I5 msb I21  - I30C  %M  | u  c Val v  Ck N  N  e  e  e     01234  0  A  N  N  N  e  024  01234  0123  01234567  0123  c  En LSSMIURA  12486  0123  012345678901  0123RWX  In In Ck En tf  tf  ne  Typ x  x  l l c c t n v f
// #-----  -  -----------  --    -  -  -  -  -  -  -  -  -  -  -  -----  -  -  -  -  -  -  ---  -----  ----  --------  ----  -  -  --------  -----  ----  ------------  -------  -  -  -  -  --  --  --   -  -  -  - - - - - - - -
// # VMX Load/Store Instructions
// #   lvebx VT,RA,RB   PRI = 31 SEC =   7
// 011111  -  0000000111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  10000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 0 0 0
// #   lvehx VT,RA,RB   PRI = 31 SEC =  39
// 011111  -  0000100111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  01000  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 1 0 0
// #   lvewx VT,RA,RB   PRI = 31 SEC =  71
// 011111  -  0001000111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00100  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 1 0 0
// #   lvx   VT,RA,RB   PRI = 31 SEC = 103
// 011111  -  0001100111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00001  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 1 0 0
// #   lvxl  VT,RA,RB   PRI = 31 SEC = 359
// 011111  -  0101100111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  1000-000  00001  0000  110000000000  0111000  0  0  -  0  00  00  00   1  0  0  0 0 0 0 0 1 0 0
// #   stvebx VS,RA,RB   PRI = 31 SEC = 135
// 011111  -  0010000111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  10000  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 0 0 0
// #   stvehx VS,RA,RB   PRI = 31 SEC = 167
// 011111  -  0010100111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  01000  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 1 0 0
// #   stvewx VS,RA,RB   PRI = 31 SEC = 199
// 011111  -  0011000111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00100  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 1 0 0
// #   stvx  VS,RA,RB   PRI = 31 SEC = 231
// 011111  -  0011100111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00001  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 1 0 0
// #   stvxl VS,RA,RB   PRI = 31 SEC = 487
// 011111  -  0111100111-  --    1  0  0  0  1  0  0  0  0  0  -  -----  0  0  0  0  1  0  ---  00000  00--  --------  ----  1  0  0100-000  00001  0000  101000000000  0111000  0  0  -  0  00  00  00   0  0  0  0 0 0 0 0 1 0 0
// #
// # Limit Coproc to IBM portion of sandbox see Note 9
// #000000  -  01---------  --   0   ~  0  ~  ~  ~  ~  ~  ~  ~  ~  ~~~~~  ~  ~  ~  ~  ~  ~  ~~~  ~~~~~  ~~~~  ~~~~~~~~  ~~~~  ~  ~  ~~~~~~~~  ~~~~~  ~~~~  ~~~~~~~~~~~~  ~~~~~~~  ~  ~  0  0  ~~  ~~  ~~   ~  ~  ~  ~ ~ ~ ~ ~ ~ ~ ~
//
module p405s_dcdPla (
plaApuLdSt,
plaMac,
plaVal,
plaPriv,
plaRaEq0Ck,
NplaApRdEn,
NplaBpRdEn,
plaSpRdEn,
plaLpWrEn,
plaRpWrEn,
plaRpMuxSel,
plaLitCntl,
plaBpLitGenSel,
plaCmplmntA,
NplaAregEn,
NplaBregEn,
NplaSregEn,
plaSrmEn,
plaSrmMuxSel,
plaUnitEn,
plaAdmCntl,
plaLogicalCntl,
plaSrmCntl,
plaEaCalc,
plaAddEn,
plaLSSMIURA,
plaByteCnt,
plaIcuOp,
plaDcuOp,
plaMmuCode,
PCL_dcdHotCIn,
PCL_dcdXerCa,
plaOeCk,
plaXerCaEn,
plaMtspr,
plaMfspr,
plaMtdcr,
plaMfdcr,
plaWrExtEn,
plaWrtee,
accTyp,
plaLwarx,
plaStwcx,
plaMrSel,
plaMdSel,
plaNegMac,
plaGateZeroToAccReg,
plaMacSat,
plaForceAlgn,
plaApuDiv,
plaMtcrf,
priOp,
sprMsb,
secOp,
pgmEn);

output  plaApuLdSt;
output  plaMac;
output  plaVal;
output  plaPriv;
output  plaRaEq0Ck;
output  NplaApRdEn;
output  NplaBpRdEn;
output  plaSpRdEn;
output  plaLpWrEn;
output  plaRpWrEn;
output  plaRpMuxSel;
output [0:4] plaLitCntl;
output  plaBpLitGenSel;
output  plaCmplmntA;
output  NplaAregEn;
output  NplaBregEn;
output  NplaSregEn;
output  plaSrmEn;
output [0:2] plaSrmMuxSel;
output [0:4] plaUnitEn;
output [0:3] plaAdmCntl;
output [0:7] plaLogicalCntl;
output [0:3] plaSrmCntl;
output  plaEaCalc;
output  plaAddEn;
output [0:7] plaLSSMIURA;
output [0:4] plaByteCnt;
output [0:3] plaIcuOp;
output [0:11] plaDcuOp;
output [0:6] plaMmuCode;
output  PCL_dcdHotCIn;
output  PCL_dcdXerCa;
output  plaOeCk;
output  plaXerCaEn;
output  plaMtspr;
output  plaMfspr;
output  plaMtdcr;
output  plaMfdcr;
output  plaWrExtEn;
output  plaWrtee;
output  accTyp;
output  plaLwarx;
output  plaStwcx;
output  plaMrSel;
output  plaMdSel;
output  plaNegMac;
output  plaGateZeroToAccReg;
output  plaMacSat;
output  plaForceAlgn;
output  plaApuDiv;
output  plaMtcrf;

input [0:5] priOp;
input  sprMsb;
input [21:31] secOp;
input [0:1] pgmEn;

wire [0:5] not_priOp;
wire [21:31] not_secOp;
wire [0:1] not_pgmEn;

wire [0:157] pterm;

assign not_priOp[0] = ~(priOp[0]);
assign not_priOp[1] = ~(priOp[1]);
assign not_priOp[2] = ~(priOp[2]);
assign not_priOp[3] = ~(priOp[3]);
assign not_priOp[4] = ~(priOp[4]);
assign not_priOp[5] = ~(priOp[5]);
assign not_secOp[21] = ~(secOp[21]);
assign not_secOp[22] = ~(secOp[22]);
assign not_secOp[23] = ~(secOp[23]);
assign not_secOp[24] = ~(secOp[24]);
assign not_secOp[25] = ~(secOp[25]);
assign not_secOp[26] = ~(secOp[26]);
assign not_secOp[27] = ~(secOp[27]);
assign not_secOp[28] = ~(secOp[28]);
assign not_secOp[29] = ~(secOp[29]);
assign not_secOp[30] = ~(secOp[30]);
assign not_pgmEn[0] = ~(pgmEn[0]);

// AND array expressions and reprint of all terms
// <0> 000100--00-101110--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000
assign pterm[0] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[22] & not_secOp[23] & secOp[25] & 
   not_secOp[26] & secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <1> 01111110101-10011--- 000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[1] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   sprMsb & not_secOp[21] & secOp[22] & not_secOp[23] & secOp[24] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <2> 000100---111011-0--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
assign pterm[2] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[30]);
// <3> 000100---11-01100--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
assign pterm[3] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & secOp[23] & secOp[24] & not_secOp[26] & secOp[27] & 
   secOp[28] & not_secOp[29] & not_secOp[30]);
// <4> 000100--0-11011-0--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
assign pterm[4] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[22] & secOp[24] & secOp[25] & 
   not_secOp[26] & secOp[27] & secOp[28] & not_secOp[30]);
// <5> 000100--0-1-01100--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000
assign pterm[5] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[22] & secOp[24] & not_secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <6> 000100--00--01100--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000
assign pterm[6] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[22] & not_secOp[23] & not_secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <7> 011111-0110011100--- 000000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[7] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <8> 000100-00-0-01-00--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000
assign pterm[8] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[21] & not_secOp[22] & not_secOp[24] & 
   not_secOp[26] & secOp[27] & not_secOp[29] & not_secOp[30]);
// <9> 011111-1111000110--- 000100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000
assign pterm[9] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <10> 011111-0000111100--- 000000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[10] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & secOp[25] & 
   secOp[26] & secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <11> --0100-0-10101-00--- 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[11] = (not_priOp[2] & priOp[3] & not_priOp[4] & not_priOp[5] & 
   not_secOp[21] & secOp[23] & not_secOp[24] & secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[29] & not_secOp[30]);
// <12> 000100-0000-01000--- 011000000100000000001000000000000000000000000000000000000000000000000000000000000000000000000000001010000
assign pterm[12] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[21] & not_secOp[22] & not_secOp[23] & 
   not_secOp[24] & not_secOp[26] & secOp[27] & not_secOp[28] & not_secOp[29] & 
   not_secOp[30]);
// <13> 011111-1111010010--1 001100000000000000001000000001000000000000000000000000000000000000000000000000000010000000000000000000000
assign pterm[13] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & not_secOp[30] & pgmEn[1]);
// <14> --0100-00-0101-00--- 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[14] = (not_priOp[2] & priOp[3] & not_priOp[4] & not_priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[24] & secOp[25] & not_secOp[26] & 
   secOp[27] & not_secOp[29] & not_secOp[30]);
// <15> 011111-1100-11000--- 000000000000000000000000000000000000000000000100000000000000000000000000000000000000000100000000000000000
assign pterm[15] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <16> 011111-0001010011--- 000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[16] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <17> 0--111-1110111010--- 000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000
assign pterm[17] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & secOp[21] & 
   secOp[22] & secOp[23] & not_secOp[24] & secOp[25] & secOp[26] & secOp[27] & 
   not_secOp[28] & secOp[29] & not_secOp[30]);
// <18> 011111101-10-0011--- 000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[18] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   sprMsb & not_secOp[21] & secOp[22] & secOp[24] & not_secOp[25] & not_secOp[27] & 
   not_secOp[28] & secOp[29] & secOp[30]);
// <19> 0--111-0001001011--- 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[19] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   not_secOp[22] & not_secOp[23] & secOp[24] & not_secOp[25] & not_secOp[26] & 
   secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <20> 000100-0-10-01000--- 011000000100000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010000
assign pterm[20] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[21] & secOp[23] & not_secOp[24] & 
   not_secOp[26] & secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <21> 011111-1110110010--1 001101000100000000101000000001000000000000000000000000000000000000000000000000000100000000000000000000000
assign pterm[21] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & not_secOp[24] & secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & not_secOp[30] & pgmEn[1]);
// <22> 011111-00-0100111--- 100000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000100
assign pterm[22] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[24] & secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <23> 011111-0101110010--1 001101100000000000111000000000000000000000000000000000000000000000000000000001000000000000000000000000000
assign pterm[23] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & secOp[24] & secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & not_secOp[30] & pgmEn[1]);
// <24> 011111-00-1000111--- 100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000100
assign pterm[24] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[24] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <25> 000100---1-101110--- 011000010100000000000000000000000000000000000000000000000000000000000000000000000000001000000000000100000
assign pterm[25] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & secOp[23] & secOp[25] & not_secOp[26] & secOp[27] & 
   secOp[28] & secOp[29] & not_secOp[30]);
// <26> 011111-00-0000111--- 100000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000
assign pterm[26] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[24] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <27> 011111-1110010010--1 001110000100000000001000000001000000000000000010000000001000000000000000000000000001000000000000000000000
assign pterm[27] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & not_secOp[30] & pgmEn[1]);
// <28> 011111--0111010-0--- 000000000000101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[28] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[30]);
// <29> 011111--011-01000--- 000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[29] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & secOp[23] & secOp[24] & not_secOp[26] & secOp[27] & not_secOp[28] & 
   not_secOp[29] & not_secOp[30]);
// <30> 0--111-0-00111100--- 000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[30] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   not_secOp[23] & not_secOp[24] & secOp[25] & secOp[26] & secOp[27] & secOp[28] & 
   not_secOp[29] & not_secOp[30]);
// <31> 011111--0-0001000--- 000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[31] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & not_secOp[24] & not_secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <32> 011111-1000110110--1 001101100000000000111000000000000000000000000000000000000000000000000000000000100000000000000000000000000
assign pterm[32] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30] & pgmEn[1]);
// <33> 0--111-10-1-10111--- 000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000
assign pterm[33] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & secOp[21] & 
   not_secOp[22] & secOp[24] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <34> 011111-1100111000--- 001000100110001000001100000010000000000000001000000000000000000000000000000000000000000000000000000000000
assign pterm[34] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & secOp[25] & secOp[26] & 
   secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <35> 0--111-0101110-11--- 000000000100000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
assign pterm[35] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   secOp[22] & not_secOp[23] & secOp[24] & secOp[25] & secOp[26] & not_secOp[27] & 
   secOp[29] & secOp[30]);
// <36> 011111--111-01011-0- 001000000100000000001000001000000000000000000000000000000000000000000000000000000000001000000000000000000
assign pterm[36] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[22] & secOp[23] & secOp[24] & not_secOp[26] & secOp[27] & not_secOp[28] & 
   secOp[29] & secOp[30] & not_pgmEn[0]);
// <37> 011111--111-01011-1- 001000000100000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000010
assign pterm[37] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[22] & secOp[23] & secOp[24] & not_secOp[26] & secOp[27] & not_secOp[28] & 
   secOp[29] & secOp[30] & pgmEn[0]);
// <38> --0100---1-1011-0--- 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[38] = (not_priOp[2] & priOp[3] & not_priOp[4] & not_priOp[5] & secOp[23] & 
   secOp[25] & not_secOp[26] & secOp[27] & secOp[28] & not_secOp[30]);
// <39> 01001--0010010110--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[39] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & priOp[4] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <40> 011111-0001111100--- 001000000110000000001000000100000001001000000000000000000000000000000000000000000000000000000000000000000
assign pterm[40] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & secOp[24] & secOp[25] & secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <41> 000100---1--01100--- 011000010100000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000
assign pterm[41] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & secOp[23] & not_secOp[26] & secOp[27] & secOp[28] & 
   not_secOp[29] & not_secOp[30]);
// <42> 010011-000011001---- 001101100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[42] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & priOp[4] & 
   priOp[5] & not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & 
   secOp[25] & secOp[26] & not_secOp[27] & not_secOp[28] & secOp[29]);
// <43> 011111-0111010011--- 001000100000000110001000000001000000000000000000000000000000000000000000000000000000000010000000000000000
assign pterm[43] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <44> 011111-1000000000--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[44] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   not_secOp[26] & not_secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <45> 0100---01-0100001--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[45] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_secOp[21] & secOp[22] & not_secOp[24] & secOp[25] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & secOp[30]);
// <46> 0--111---11101011--- 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[46] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & secOp[23] & 
   secOp[24] & secOp[25] & not_secOp[26] & secOp[27] & not_secOp[28] & secOp[29] & 
   secOp[30]);
// <47> 011111-0000011000--- 001000000110010000001110100010000000000000010000000000000000000000000000000000000000000000000000000000000
assign pterm[47] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <48> 000100--0---01100--- 011000010100000000000000000000000000000000000000000000000000000000000000000000000000001000000000010000000
assign pterm[48] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[22] & not_secOp[26] & secOp[27] & 
   secOp[28] & not_secOp[29] & not_secOp[30]);
// <49> 011111-0111000011--- 001100100000000110001000000001000000000000000000000000000000000000000000000000000000000000100000000000000
assign pterm[49] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <50> 011111-00100101101-- 001010010000000000000000000000000000000000000010010000000010000001010000000000111000000000000000100000000
assign pterm[50] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30] & secOp[31]);
// <51> 011111-0000000100--- 001000010000000001001000000000011000000000000001000000000000000000000000000000000000100000000000000000000
assign pterm[51] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   not_secOp[26] & not_secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <52> 0100---0-00100001--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[52] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_secOp[21] & not_secOp[23] & not_secOp[24] & secOp[25] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & secOp[30]);
// <53> 0111-1-0111011100--- 001000000110000000001000000100000000000100000000000000000000000000000000000000000000000000000000000000000
assign pterm[53] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <54> 0100---0100-00001--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[54] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & secOp[30]);
// <55> 000100--0--1011-0--- 011000010100000000000000000000001000000000000000000000000000000000000000000000000000001000000000010000000
assign pterm[55] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4] & not_priOp[5] & not_secOp[22] & secOp[25] & not_secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[30]);
// <56> 01001---000010000--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[56] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & priOp[4] & 
   not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <57> 011111-0001001110--- 001000000110000000001000000100000000000011000000000000000000000000000000000000000000000000000000000000000
assign pterm[57] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & secOp[24] & not_secOp[25] & 
   not_secOp[26] & secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <58> 01001--00000-0000--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[58] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & priOp[4] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <59> 0100---0-11000001--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[59] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_secOp[21] & secOp[23] & secOp[24] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & secOp[30]);
// <60> 011111-0010000011--- 001100100000000000011000000000000000000000000000000000000000000000000000000000000000000000001100000000000
assign pterm[60] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & 
   not_secOp[26] & not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <61> 011111-0010010000--- 001000100000010010001000000000000000000000000000000000000000000000000000000000000000000000000000000000001
assign pterm[61] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <62> 011111-1011110110--- 001010000000000000000000000000000000000000000010000000001000000001000010000000110000000000000000000000000
assign pterm[62] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & secOp[23] & secOp[24] & secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <63> 011111-1111110110--- 001010000000000000000000000000000000000000000010000000001000000001000100000000111000000000000000000000000
assign pterm[63] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & secOp[24] & secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <64> 0100---0011-00001--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[64] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & secOp[24] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & secOp[30]);
// <65> 011111--0-00010-0--- 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000
assign pterm[65] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & not_secOp[24] & not_secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[30]);
// <66> 011111--011101011--- 001000000100000000001000010000000000000000000000000000000000000000000000000000000000001000000000000010000
assign pterm[66] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & secOp[29] & secOp[30]);
// <67> 0100---001-000001--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[67] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & secOp[30]);
// <68> 011111-1111010111--- 100010000000000000001000000000000000000000000010010000000010000001010000000000111000000000000000000000000
assign pterm[68] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <69> 0--111--00000-000--- 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[69] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[22] & 
   not_secOp[23] & not_secOp[24] & not_secOp[25] & not_secOp[26] & not_secOp[28] & 
   not_secOp[29] & not_secOp[30]);
// <70> 011111-1-00011000--- 001000000110001100001111000010000000000000001000000000000000000000000000000000000000000000000000000000000
assign pterm[70] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <71> 011111-0010100011--- 001101100000000010101000000000000000000000000000000000000000000000000000000000000000000000001000000000000
assign pterm[71] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & secOp[25] & 
   not_secOp[26] & not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <72> 011111-000-001011--- 001000000100000000001000010000000100000000000000000000000000000000000000000000000000000000000000000010000
assign pterm[72] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[25] & not_secOp[26] & 
   secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <73> 0--111-01-0-10111--- 000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000
assign pterm[73] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   secOp[22] & not_secOp[24] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <74> 011111-1010010101--- 001010010000000000000000000000000000000000000010011010000000000001010000000000111000000000000000000000000
assign pterm[74] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & not_secOp[29] & secOp[30]);
// <75> 011111-0000-00000--- 001000000000000001001000000000100000000000000001000000000000000000000000000000000000100000000000000000000
assign pterm[75] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[26] & 
   not_secOp[27] & not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <76> 011111-0110-11100--- 001000000110000000001000000100000000001000000000000000000000000000000000000000000000000000000000000000000
assign pterm[76] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & not_secOp[24] & secOp[26] & secOp[27] & 
   secOp[28] & not_secOp[29] & not_secOp[30]);
// <77> 011111-0101-10011--- 000001100100000110101000000001000000000000000000000000000000000000000000000000000000000001000000000000000
assign pterm[77] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & secOp[24] & secOp[26] & not_secOp[27] & 
   not_secOp[28] & secOp[29] & secOp[30]);
// <78> 011111-001--10111--- 001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[78] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & secOp[26] & not_secOp[27] & secOp[28] & 
   secOp[29] & secOp[30]);
// <79> 011111-1110010110--- 001010010000000000000000000000000000000000000010010000100100000001010000000000111000000000000000000000000
assign pterm[79] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <80> 011111-0010010010--- 001100100000010110001000000001000000000000000000000000000000000000000000000000000000000010000000000000000
assign pterm[80] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & not_secOp[28] & secOp[29] & not_secOp[30]);
// <81> 011111-0101000011--- 001101100100000110101000000001000000000000000000000000000000000000000000000000000000000000010000000000000
assign pterm[81] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & secOp[24] & not_secOp[25] & 
   not_secOp[26] & not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <82> 0--111-00-1-10111--- 000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000
assign pterm[82] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   not_secOp[22] & secOp[24] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <83> 011111-1100010110--- 001010001000000000000000000000000000000000000010100000100100000001100000000000111000000000000010000000000
assign pterm[83] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <84> 011111-0000011010--- 001000100110010010001000000100000000000001000000000000000000000000000000000000000000000000000000000000000
assign pterm[84] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & secOp[27] & not_secOp[28] & secOp[29] & not_secOp[30]);
// <85> 011-11-0100-11100--- 001000000110000000001000000100000000010000000000000000000000000000000000000000000000000000000000000000000
assign pterm[85] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & secOp[26] & secOp[27] & 
   secOp[28] & not_secOp[29] & not_secOp[30]);
// <86> 0--111-0--0110111--- 000000000100000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
assign pterm[86] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   not_secOp[24] & secOp[25] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <87> 011111-1111100110--- 001110000000000000001000000000000000000000000010000000001000011000000000000000111000000000000010000000000
assign pterm[87] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <88> 011111-1010010110--- 001010010000000000000000000000000000000000000010010000100010000001010000000000111000000000000000000000000
assign pterm[88] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & secOp[23] & not_secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <89> 011111-0100000110--- 001010000000000000001000000000000000000000000010000000001000010010000000000000110000000000000010000000000
assign pterm[89] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   not_secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <90> 011111-1000010110--- 001010001000000000000000000000000000000000000010100000100010000001100000000000111000000000000010000000000
assign pterm[90] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <91> 0--111-0101-10-11--- 001000000000000000000000000000000000000000000000000000010100000000000000000000000000000000000000000000000
assign pterm[91] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[21] & 
   secOp[22] & not_secOp[23] & secOp[24] & secOp[26] & not_secOp[27] & secOp[29] & 
   secOp[30]);
// <92> 011111-10---10111--- 100000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[92] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <93> 011111-1011010101--- 001010110000010010000000000000000000000000000010011000000000000001010000000000111000000000000000000000000
assign pterm[93] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & not_secOp[29] & secOp[30]);
// <94> 011111-1110-11010--- 001000100110010010001000000100000001100000000000000000000000000000000000000000000000000000000000000000000
assign pterm[94] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & not_secOp[24] & secOp[26] & secOp[27] & 
   not_secOp[28] & secOp[29] & not_secOp[30]);
// <95> 011111-1000010101--- 001010001000000000001000000000000000000000000010101010000000000001100000000000111000000000000010000000000
assign pterm[95] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & not_secOp[29] & secOp[30]);
// <96> 011111--001101000--- 001000100100010011001000000000001000000000000001000000000000000000000000000000000000101000000000000000000
assign pterm[96] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & not_secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <97> 0111-1-0000-11100--- 001000000110000000001000000100000001000100000000000000000000000000000000000000000000000000000000000000000
assign pterm[97] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & secOp[26] & 
   secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <98> 011111-1-01010110--- 001001100000000000111000000000000000000000000000000000000000000001000000000010000000000000000000000000000
assign pterm[98] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & not_secOp[27] & 
   secOp[28] & secOp[29] & not_secOp[30]);
// <99> 011111-0100010110--- 001010000000000000001000000000000000000000000010000000001000000001001000000000110000000000000010000000000
assign pterm[99] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <100> 011111-0011110110--- 001010000000000000001000000000000000000000000010000000001000000001001000000000110000000000000010000000000
assign pterm[100] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & secOp[24] & secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <101> 011111-0-11100111--- 100010000000000000001000000000000000000000000010010000000000100001010000000000111000000000000000000000100
assign pterm[101] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & not_secOp[27] & 
   secOp[28] & secOp[29] & secOp[30]);
// <102> 011111-0111000110--- 001110000000000000001000000000000000000000000010000000001000000001000000001000111000000000000000000000000
assign pterm[102] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <103> 0--111--0-0-10111--- 000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000
assign pterm[103] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[22] & 
   not_secOp[24] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <104> 011111-0111010110--- 001110000000000000001000000000000000000000000010000000001000000001000000010000111000000000000000000000000
assign pterm[104] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <105> 011111-0-01100111--- 100010000000000000001000000000000000000000000010100000000000100001100000000000111000000000000010000000100
assign pterm[105] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <106> 011111---00001010--- 001000000100000000001000000000001000000000000001000000000000000000000000000000000000001000000000000000000
assign pterm[106] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[23] & not_secOp[24] & not_secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & secOp[29] & not_secOp[30]);
// <107> 011111--000-01000--- 001000000100000001001000000000001000000000000001000000000000000000000000000000000000101000000000000000000
assign pterm[107] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[29] & not_secOp[30]);
// <108> 011111-0111100110--- 001110001000000000001000000000000000000000000010100000000010000001000000000100111000000000000010000000000
assign pterm[108] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[22] & secOp[23] & secOp[24] & secOp[25] & not_secOp[26] & 
   not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <109> 0--111--0--110111--- 000000000100000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
assign pterm[109] = (not_priOp[0] & priOp[3] & priOp[4] & priOp[5] & not_secOp[22] & 
   secOp[25] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & secOp[30]);
// <110> 011111-0000110110--- 001010000000000000001000000000000000000000000010000000001000000001000000100000111000000000000010000000000
assign pterm[110] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <111> 011111-11110-0110--- 001010000000000000001000000000000000000000000010000000001000010100000000000000111000000000000010000000000
assign pterm[111] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & secOp[22] & secOp[23] & secOp[24] & not_secOp[25] & not_secOp[27] & 
   secOp[28] & secOp[29] & not_secOp[30]);
// <112> 011111-0001010110--- 001010000000000000001000000000000000000000000010000000001000000001000001000000111000000000000010000000000
assign pterm[112] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & not_secOp[30]);
// <113> 011111-000-010011--- 001001100100010010101000000001000000000000000000000000000000000000000000000000000000000001000000000000000
assign pterm[113] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & not_secOp[28] & secOp[29] & secOp[30]);
// <114> 011111-0000010100--- 001010001000000000001000000000000000000000000010100000000010000001100000000000111000000000000011000000000
assign pterm[114] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[24] & not_secOp[25] & 
   secOp[26] & not_secOp[27] & secOp[28] & not_secOp[29] & not_secOp[30]);
// <115> 011111-1001010101--- 001010101000010010001000000000000000000000000010101000000000000001100000000000111000000000000010000000000
assign pterm[115] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   secOp[21] & not_secOp[22] & not_secOp[23] & secOp[24] & not_secOp[25] & secOp[26] & 
   not_secOp[27] & secOp[28] & not_secOp[29] & secOp[30]);
// <116> 011111-001--00111--- 000010000000000000001000000000000000000000000010010000000000000001010000000000111000000000000000000000000
assign pterm[116] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & secOp[23] & not_secOp[26] & not_secOp[27] & 
   secOp[28] & secOp[29] & secOp[30]);
// <117> 011111--01-0010-0--- 001000000100010000001000000000001000000000000001000000000000000000000000000000000000011000000000000000000
assign pterm[117] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & secOp[23] & not_secOp[25] & not_secOp[26] & secOp[27] & 
   not_secOp[28] & not_secOp[30]);
// <118> 011111--01--10111--- 000010000010000000000000000000000000000000000010010000000000000001010000000000111000000000000000000000000
assign pterm[118] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & secOp[23] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <119> 011111-0-10-10111--- 001010010010000000000000000000000000000000000010010000000000000001010000000000111000000000000000000000000
assign pterm[119] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & secOp[23] & not_secOp[24] & secOp[26] & not_secOp[27] & secOp[28] & 
   secOp[29] & secOp[30]);
// <120> 011111--00--10111--- 000010000010000000000000000000000000000000000010100000000000000001100000000000111000000000000010000000000
assign pterm[120] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & not_secOp[23] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <121> 011111--011-010-0--- 001000100100000010001000000000001000000000000001000000000000000000000000000000000000011100000000000000000
assign pterm[121] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[22] & secOp[23] & secOp[24] & not_secOp[26] & secOp[27] & not_secOp[28] & 
   not_secOp[30]);
// <122> 011111-000---0111--- 000010000000000000001000000000000000000000000010100000000000000001100000000000111000000000000010000000000
assign pterm[122] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[22] & not_secOp[23] & not_secOp[27] & secOp[28] & 
   secOp[29] & secOp[30]);
// <123> 101110-------------- 000000001000000000000000000000000000000000000000100100000000000000100000000000000000000000000010000000000
assign pterm[123] = (priOp[0] & not_priOp[1] & priOp[2] & priOp[3] & priOp[4] & 
   not_priOp[5]);
// <124> 011111-0-0--10111--- 001010001010000000001000000000000000000000000010100000000000000001100000000000111000000000000010000000000
assign pterm[124] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & priOp[4] & priOp[5] & 
   not_secOp[21] & not_secOp[23] & secOp[26] & not_secOp[27] & secOp[28] & secOp[29] & 
   secOp[30]);
// <125> -10-00-------------- 000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000
assign pterm[125] = (priOp[1] & not_priOp[2] & not_priOp[4] & not_priOp[5]);
// <126> 100-1--------------- 000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000
assign pterm[126] = (priOp[0] & not_priOp[1] & not_priOp[2] & priOp[4]);
// <127> 101111-------------- 000000010000000000000000000000000000000000000000010100000000000000010000000000000000000000000000000000000
assign pterm[127] = (priOp[0] & not_priOp[1] & priOp[2] & priOp[3] & priOp[4] & 
   priOp[5]);
// <128> 10-0-1-------------- 000000000100000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
assign pterm[128] = (priOp[0] & not_priOp[1] & not_priOp[3] & priOp[5]);
// <129> 10-10--------------- 000000010000000000000000000000000000000000000000010000000000000000010000000000000000000000000000000000000
assign pterm[129] = (priOp[0] & not_priOp[1] & priOp[3] & not_priOp[4]);
// <130> 00101--------------- 000000000000000001000000000000100000000000000001000000000000000000000000000000000000100000000000000000000
assign pterm[130] = (not_priOp[0] & not_priOp[1] & priOp[2] & not_priOp[3] & 
   priOp[4]);
// <131> -01101-------------- 000000000100000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
assign pterm[131] = (not_priOp[1] & priOp[2] & priOp[3] & not_priOp[4] & priOp[5]);
// <132> -10101-------------- 000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[132] = (priOp[1] & not_priOp[2] & priOp[3] & not_priOp[4] & priOp[5]);
// <133> 001111-------------- 000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[133] = (not_priOp[0] & not_priOp[1] & priOp[2] & priOp[3] & priOp[4] & 
   priOp[5]);
// <134> 1100---------------- 100000000000000000001000000000000000000000000000100000000000000000100000000000000000000000000010000000000
assign pterm[134] = (priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3]);
// <135> 0110-1-------------- 000000000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[135] = (not_priOp[0] & priOp[1] & priOp[2] & not_priOp[3] & priOp[5]);
// <136> 011-01-------------- 000000000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[136] = (not_priOp[0] & priOp[1] & priOp[2] & not_priOp[4] & priOp[5]);
// <137> 01000-----------1--- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[137] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_priOp[4] & secOp[30]);
// <138> 001000-------------- 001000100101000011001000000000001000000000000001000000000000000000000000000000000000100100000000000000000
assign pterm[138] = (not_priOp[0] & not_priOp[1] & priOp[2] & not_priOp[3] & 
   not_priOp[4] & not_priOp[5]);
// <139> 1-0--1-------------- 000000000110000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000
assign pterm[139] = (priOp[0] & not_priOp[2] & priOp[5]);
// <140> 1101---------------- 100000000000000000001000000000000000000000000000010000000000000000010000000000000000000000000000000000000
assign pterm[140] = (priOp[0] & priOp[1] & not_priOp[2] & priOp[3]);
// <141> -0--11-------------- 000000000001000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[141] = (not_priOp[1] & priOp[4] & priOp[5]);
// <142> 000011-------------- 001000110000000011001000000000010000000000000001000000000000000000000000000000000000100000000000000000000
assign pterm[142] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & not_priOp[3] & 
   priOp[4] & priOp[5]);
// <143> 0100-0-------------- 001001100000000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[143] = (not_priOp[0] & priOp[1] & not_priOp[2] & not_priOp[3] & 
   not_priOp[5]);
// <144> -0101--------------- 001000100000000010001000000000000000000000000000000000010000000000000000000000000000000000000000000000000
assign pterm[144] = (not_priOp[1] & priOp[2] & not_priOp[3] & priOp[4]);
// <145> 01010--------------- 001000000110000000001100000010000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[145] = (not_priOp[0] & priOp[1] & not_priOp[2] & priOp[3] & 
   not_priOp[4]);
// <146> 1-0-0--------------- 000010100001000010000000000000000000000000000010000000000010000001000000000000111000000000000000000000000
assign pterm[146] = (priOp[0] & not_priOp[2] & not_priOp[4]);
// <147> 000111-------------- 001000100100000010001000010000000000000000000000000000000000000000000000000000000000000000000000000010000
assign pterm[147] = (not_priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3] & priOp[4] & 
   priOp[5]);
// <148> 01100--------------- 001000100110000010001000000100000000001000000000000000000000000000000000000000000000000000000000000000000
assign pterm[148] = (not_priOp[0] & priOp[1] & priOp[2] & not_priOp[3] & 
   not_priOp[4]);
// <149> 110-1--------------- 000010100001000010000000000000000000000000000010000000000001000001000000000000111000000000000000000000000
assign pterm[149] = (priOp[0] & priOp[1] & not_priOp[2] & priOp[4]);
// <150> 010111-------------- 001000000110000000001110000010000000000000000000000000000000000000000000000000000000000000000000000000000
assign pterm[150] = (not_priOp[0] & priOp[1] & not_priOp[2] & priOp[3] & priOp[4] & 
   priOp[5]);
// <151> 00110--------------- 001000100101000010001000000000001000000000000001000000000000000000000000000000000000000100000000000000000
assign pterm[151] = (not_priOp[0] & not_priOp[1] & priOp[2] & priOp[3] & 
   not_priOp[4]);
// <152> 1001---------------- 001010110001000010000000000000000000000000000010010000000000000001010000000000111000000000000000000000000
assign pterm[152] = (priOp[0] & not_priOp[1] & not_priOp[2] & priOp[3]);
// <153> 01101--------------- 001000100110000010001000000100000001010000000000000000000000000000000000000000000000000000000000000000000
assign pterm[153] = (not_priOp[0] & priOp[1] & priOp[2] & not_priOp[3] & priOp[4]);
// <154> 01110--------------- 001000100110000010001000000100000001000100000000000000000000000000000000000000000000000000000000000000000
assign pterm[154] = (not_priOp[0] & priOp[1] & priOp[2] & priOp[3] & not_priOp[4]);
// <155> 101----------------- 001010100011000010000000000000000000000000000010000000000100000001000000000000111000000000000000000000000
assign pterm[155] = (priOp[0] & not_priOp[1] & priOp[2]);
// <156> 00111--------------- 001010100101000010001000000000001000000000000001000000000000000000000000000000000000000000000000000000000
assign pterm[156] = (not_priOp[0] & not_priOp[1] & priOp[2] & priOp[3] & priOp[4]);
// <157> 10-0---------------- 001010101001000010001000000000000000000000000010100000000000000001100000000000111000000000000010000000000
assign pterm[157] = (priOp[0] & not_priOp[1] & not_priOp[3]);

// OR array expressions
assign plaApuLdSt = (pterm[22] | pterm[24] | pterm[26] | pterm[68] | pterm[92] | 
   pterm[101] | pterm[105] | pterm[134] | pterm[140]);
assign plaMac = (pterm[12] | pterm[20] | pterm[25] | pterm[41] | pterm[48] | pterm[55]);
assign plaVal = (pterm[12] | pterm[13] | pterm[20] | pterm[21] | pterm[23] | pterm[25] | 
   pterm[27] | pterm[32] | pterm[34] | pterm[36] | pterm[37] | pterm[39] | pterm[40] | 
   pterm[41] | pterm[42] | pterm[43] | pterm[44] | pterm[45] | pterm[47] | pterm[48] | 
   pterm[49] | pterm[50] | pterm[51] | pterm[52] | pterm[53] | pterm[54] | pterm[55] | 
   pterm[56] | pterm[57] | pterm[58] | pterm[59] | pterm[60] | pterm[61] | pterm[62] | 
   pterm[63] | pterm[64] | pterm[66] | pterm[67] | pterm[70] | pterm[71] | pterm[72] | 
   pterm[74] | pterm[75] | pterm[76] | pterm[78] | pterm[79] | pterm[80] | pterm[81] | 
   pterm[83] | pterm[84] | pterm[85] | pterm[87] | pterm[88] | pterm[89] | pterm[90] | 
   pterm[91] | pterm[93] | pterm[94] | pterm[95] | pterm[96] | pterm[97] | pterm[98] | 
   pterm[99] | pterm[100] | pterm[102] | pterm[104] | pterm[106] | pterm[107] | 
   pterm[108] | pterm[110] | pterm[111] | pterm[112] | pterm[113] | pterm[114] | 
   pterm[115] | pterm[117] | pterm[119] | pterm[121] | pterm[124] | pterm[137] | 
   pterm[138] | pterm[142] | pterm[143] | pterm[144] | pterm[145] | pterm[147] | 
   pterm[148] | pterm[150] | pterm[151] | pterm[152] | pterm[153] | pterm[154] | 
   pterm[155] | pterm[156] | pterm[157]);
assign plaPriv = (pterm[1] | pterm[9] | pterm[13] | pterm[16] | pterm[18] | pterm[21] | 
   pterm[23] | pterm[27] | pterm[32] | pterm[42] | pterm[49] | pterm[60] | pterm[71] | 
   pterm[80] | pterm[81] | pterm[87] | pterm[102] | pterm[104] | pterm[108]);
assign plaRaEq0Ck = (pterm[27] | pterm[50] | pterm[62] | pterm[63] | pterm[68] | 
   pterm[74] | pterm[79] | pterm[83] | pterm[87] | pterm[88] | pterm[89] | pterm[90] | 
   pterm[93] | pterm[95] | pterm[99] | pterm[100] | pterm[101] | pterm[102] | 
   pterm[104] | pterm[105] | pterm[108] | pterm[110] | pterm[111] | pterm[112] | 
   pterm[114] | pterm[115] | pterm[116] | pterm[118] | pterm[119] | pterm[120] | 
   pterm[122] | pterm[124] | pterm[146] | pterm[149] | pterm[152] | pterm[155] | 
   pterm[156] | pterm[157]);
assign NplaApRdEn = (pterm[21] | pterm[23] | pterm[32] | pterm[39] | pterm[42] | 
   pterm[44] | pterm[45] | pterm[52] | pterm[54] | pterm[56] | pterm[58] | pterm[59] | 
   pterm[64] | pterm[67] | pterm[71] | pterm[77] | pterm[81] | pterm[98] | pterm[113] | 
   pterm[137] | pterm[143]);
assign NplaBpRdEn = (pterm[23] | pterm[32] | pterm[34] | pterm[39] | pterm[42] | 
   pterm[43] | pterm[44] | pterm[45] | pterm[49] | pterm[52] | pterm[54] | pterm[56] | 
   pterm[58] | pterm[59] | pterm[60] | pterm[61] | pterm[64] | pterm[67] | pterm[71] | 
   pterm[77] | pterm[80] | pterm[81] | pterm[84] | pterm[93] | pterm[94] | pterm[96] | 
   pterm[98] | pterm[113] | pterm[115] | pterm[121] | pterm[132] | pterm[137] | 
   pterm[138] | pterm[142] | pterm[143] | pterm[144] | pterm[146] | pterm[147] | 
   pterm[148] | pterm[149] | pterm[151] | pterm[152] | pterm[153] | pterm[154] | 
   pterm[155] | pterm[156] | pterm[157]);
assign plaSpRdEn = (pterm[25] | pterm[41] | pterm[48] | pterm[50] | pterm[51] | pterm[55] | 
   pterm[74] | pterm[78] | pterm[79] | pterm[88] | pterm[93] | pterm[119] | pterm[127] | 
   pterm[129] | pterm[142] | pterm[152]);
assign plaLpWrEn = (pterm[83] | pterm[90] | pterm[95] | pterm[108] | pterm[114] | 
   pterm[115] | pterm[123] | pterm[124] | pterm[157]);
assign plaRpWrEn = (pterm[12] | pterm[20] | pterm[21] | pterm[25] | pterm[27] | pterm[34] | 
   pterm[35] | pterm[36] | pterm[37] | pterm[40] | pterm[41] | pterm[47] | pterm[48] | 
   pterm[53] | pterm[55] | pterm[57] | pterm[66] | pterm[70] | pterm[72] | pterm[76] | 
   pterm[77] | pterm[81] | pterm[84] | pterm[85] | pterm[86] | pterm[94] | pterm[96] | 
   pterm[97] | pterm[106] | pterm[107] | pterm[109] | pterm[113] | pterm[117] | 
   pterm[121] | pterm[128] | pterm[131] | pterm[138] | pterm[139] | pterm[145] | 
   pterm[147] | pterm[148] | pterm[150] | pterm[151] | pterm[153] | pterm[154] | 
   pterm[156]);
assign plaRpMuxSel = (pterm[34] | pterm[40] | pterm[47] | pterm[53] | pterm[57] | 
   pterm[70] | pterm[76] | pterm[84] | pterm[85] | pterm[94] | pterm[97] | pterm[118] | 
   pterm[119] | pterm[120] | pterm[124] | pterm[139] | pterm[145] | pterm[148] | 
   pterm[150] | pterm[153] | pterm[154] | pterm[155]);
assign plaLitCntl[0] = (pterm[135] | pterm[136] | pterm[138] | pterm[141] | pterm[146] | 
   pterm[149] | pterm[151] | pterm[152] | pterm[155] | pterm[156] | pterm[157]);
assign plaLitCntl[1] = (pterm[28] | pterm[133] | pterm[135] | pterm[136]);
assign plaLitCntl[2] = (pterm[47] | pterm[61] | pterm[80] | pterm[84] | pterm[93] | 
   pterm[94] | pterm[96] | pterm[113] | pterm[115] | pterm[117] | pterm[133] | 
   pterm[135] | pterm[136]);
assign plaLitCntl[3] = (pterm[28] | pterm[34] | pterm[70]);
assign plaLitCntl[4] = (pterm[16] | pterm[28] | pterm[43] | pterm[49] | pterm[70] | 
   pterm[77] | pterm[80] | pterm[81]);
assign plaBpLitGenSel = (pterm[43] | pterm[49] | pterm[61] | pterm[71] | pterm[77] | 
   pterm[80] | pterm[81] | pterm[84] | pterm[93] | pterm[94] | pterm[96] | pterm[113] | 
   pterm[115] | pterm[121] | pterm[138] | pterm[142] | pterm[144] | pterm[146] | 
   pterm[147] | pterm[148] | pterm[149] | pterm[151] | pterm[152] | pterm[153] | 
   pterm[154] | pterm[155] | pterm[156] | pterm[157]);
assign plaCmplmntA = (pterm[7] | pterm[10] | pterm[29] | pterm[31] | pterm[51] | 
   pterm[75] | pterm[96] | pterm[107] | pterm[130] | pterm[138] | pterm[142]);
assign NplaAregEn = (pterm[21] | pterm[23] | pterm[32] | pterm[39] | pterm[42] | 
   pterm[44] | pterm[45] | pterm[52] | pterm[54] | pterm[56] | pterm[58] | pterm[59] | 
   pterm[64] | pterm[67] | pterm[71] | pterm[77] | pterm[81] | pterm[98] | pterm[113] | 
   pterm[137] | pterm[143]);
assign NplaBregEn = (pterm[23] | pterm[32] | pterm[39] | pterm[42] | pterm[44] | 
   pterm[45] | pterm[52] | pterm[54] | pterm[56] | pterm[58] | pterm[59] | pterm[60] | 
   pterm[64] | pterm[67] | pterm[98] | pterm[137] | pterm[143]);
assign NplaSregEn = (pterm[12] | pterm[13] | pterm[20] | pterm[21] | pterm[23] | 
   pterm[27] | pterm[32] | pterm[34] | pterm[36] | pterm[37] | pterm[39] | pterm[40] | 
   pterm[42] | pterm[43] | pterm[44] | pterm[45] | pterm[47] | pterm[49] | pterm[51] | 
   pterm[52] | pterm[53] | pterm[54] | pterm[56] | pterm[57] | pterm[58] | pterm[59] | 
   pterm[60] | pterm[61] | pterm[64] | pterm[66] | pterm[67] | pterm[68] | pterm[70] | 
   pterm[71] | pterm[72] | pterm[75] | pterm[76] | pterm[77] | pterm[80] | pterm[81] | 
   pterm[84] | pterm[85] | pterm[87] | pterm[89] | pterm[92] | pterm[94] | pterm[95] | 
   pterm[96] | pterm[97] | pterm[98] | pterm[99] | pterm[100] | pterm[101] | pterm[102] | 
   pterm[104] | pterm[105] | pterm[106] | pterm[107] | pterm[108] | pterm[110] | 
   pterm[111] | pterm[112] | pterm[113] | pterm[114] | pterm[115] | pterm[116] | 
   pterm[117] | pterm[121] | pterm[122] | pterm[124] | pterm[134] | pterm[137] | 
   pterm[138] | pterm[140] | pterm[142] | pterm[143] | pterm[144] | pterm[145] | 
   pterm[147] | pterm[148] | pterm[150] | pterm[151] | pterm[153] | pterm[154] | 
   pterm[156] | pterm[157]);
assign plaSrmEn = (pterm[34] | pterm[47] | pterm[70] | pterm[145] | pterm[150]);
assign plaSrmMuxSel[0] = (pterm[47] | pterm[70] | pterm[150]);
assign plaSrmMuxSel[1] = (pterm[70]);
assign plaSrmMuxSel[2] = (pterm[47]);
assign plaUnitEn[0] = (pterm[66] | pterm[72] | pterm[147]);
assign plaUnitEn[1] = (pterm[36]);
assign plaUnitEn[2] = (pterm[40] | pterm[53] | pterm[57] | pterm[76] | pterm[84] | 
   pterm[85] | pterm[94] | pterm[97] | pterm[148] | pterm[153] | pterm[154]);
assign plaUnitEn[3] = (pterm[34] | pterm[47] | pterm[70] | pterm[145] | pterm[150]);
assign plaUnitEn[4] = (pterm[13] | pterm[21] | pterm[27] | pterm[43] | pterm[49] | 
   pterm[77] | pterm[80] | pterm[81] | pterm[113]);
assign plaAdmCntl[0] = (pterm[75] | pterm[130]);
assign plaAdmCntl[1] = (pterm[51] | pterm[142]);
assign plaAdmCntl[2] = (pterm[11] | pterm[14] | pterm[19] | pterm[38] | pterm[46] | 
   pterm[51] | pterm[55] | pterm[69] | pterm[96] | pterm[106] | pterm[107] | pterm[117] | 
   pterm[121] | pterm[138] | pterm[141] | pterm[151] | pterm[156]);
assign plaAdmCntl[3] = (pterm[72]);
assign plaLogicalCntl[0] = (pterm[7] | pterm[10]);
assign plaLogicalCntl[1] = (pterm[30] | pterm[40] | pterm[94] | pterm[97] | pterm[153] | 
   pterm[154]);
assign plaLogicalCntl[2] = (pterm[94]);
assign plaLogicalCntl[3] = (pterm[85] | pterm[153]);
assign plaLogicalCntl[4] = (pterm[40] | pterm[76] | pterm[148]);
assign plaLogicalCntl[5] = (pterm[53] | pterm[97] | pterm[154]);
assign plaLogicalCntl[6] = (pterm[17] | pterm[57]);
assign plaLogicalCntl[7] = (pterm[57] | pterm[84]);
assign plaSrmCntl[0] = (pterm[125]);
assign plaSrmCntl[1] = (pterm[47]);
assign plaSrmCntl[2] = (pterm[34] | pterm[70]);
assign plaSrmCntl[3] = (pterm[15]);
assign plaEaCalc = (pterm[27] | pterm[50] | pterm[62] | pterm[63] | pterm[68] | pterm[74] | 
   pterm[79] | pterm[83] | pterm[87] | pterm[88] | pterm[89] | pterm[90] | pterm[93] | 
   pterm[95] | pterm[99] | pterm[100] | pterm[101] | pterm[102] | pterm[104] | 
   pterm[105] | pterm[108] | pterm[110] | pterm[111] | pterm[112] | pterm[114] | 
   pterm[115] | pterm[116] | pterm[118] | pterm[119] | pterm[120] | pterm[122] | 
   pterm[124] | pterm[146] | pterm[149] | pterm[152] | pterm[155] | pterm[157]);
assign plaAddEn = (pterm[51] | pterm[75] | pterm[96] | pterm[106] | pterm[107] | 
   pterm[117] | pterm[121] | pterm[130] | pterm[138] | pterm[142] | pterm[151] | 
   pterm[156]);
assign plaLSSMIURA[0] = (pterm[83] | pterm[90] | pterm[95] | pterm[105] | pterm[108] | 
   pterm[114] | pterm[115] | pterm[120] | pterm[122] | pterm[123] | pterm[124] | 
   pterm[134] | pterm[157]);
assign plaLSSMIURA[1] = (pterm[50] | pterm[68] | pterm[74] | pterm[79] | pterm[88] | 
   pterm[93] | pterm[101] | pterm[116] | pterm[118] | pterm[119] | pterm[127] | 
   pterm[129] | pterm[140] | pterm[152]);
assign plaLSSMIURA[2] = (pterm[74] | pterm[93] | pterm[95] | pterm[115]);
assign plaLSSMIURA[3] = (pterm[123] | pterm[127]);
assign plaLSSMIURA[4] = (pterm[74] | pterm[95]);
assign plaLSSMIURA[5] = (pterm[35] | pterm[86] | pterm[109] | pterm[128] | pterm[131] | 
   pterm[139]);
assign plaLSSMIURA[6] = (pterm[79] | pterm[83] | pterm[88] | pterm[90]);
assign plaLSSMIURA[7] = (pterm[91] | pterm[144]);
assign plaByteCnt[0] = (pterm[26] | pterm[27] | pterm[62] | pterm[63] | pterm[82] | 
   pterm[87] | pterm[89] | pterm[99] | pterm[100] | pterm[102] | pterm[104] | 
   pterm[110] | pterm[111] | pterm[112] | pterm[126]);
assign plaByteCnt[1] = (pterm[22] | pterm[73] | pterm[79] | pterm[83] | pterm[91] | 
   pterm[155]);
assign plaByteCnt[2] = (pterm[24] | pterm[50] | pterm[68] | pterm[88] | pterm[90] | 
   pterm[103] | pterm[108] | pterm[114] | pterm[146]);
assign plaByteCnt[3] = (pterm[33] | pterm[149]);
assign plaByteCnt[4] = (pterm[101] | pterm[105]);
assign plaIcuOp[0] = (pterm[87] | pterm[89] | pterm[111]);
assign plaIcuOp[1] = (pterm[87]);
assign plaIcuOp[2] = (pterm[111]);
assign plaIcuOp[3] = (pterm[9] | pterm[89]);
assign plaDcuOp[0] = (pterm[50] | pterm[62] | pterm[63] | pterm[68] | pterm[74] | 
   pterm[79] | pterm[83] | pterm[88] | pterm[90] | pterm[93] | pterm[95] | pterm[98] | 
   pterm[99] | pterm[100] | pterm[101] | pterm[102] | pterm[104] | pterm[105] | 
   pterm[108] | pterm[110] | pterm[112] | pterm[114] | pterm[115] | pterm[116] | 
   pterm[118] | pterm[119] | pterm[120] | pterm[122] | pterm[124] | pterm[146] | 
   pterm[149] | pterm[152] | pterm[155] | pterm[157]);
assign plaDcuOp[1] = (pterm[83] | pterm[90] | pterm[95] | pterm[105] | pterm[114] | 
   pterm[115] | pterm[120] | pterm[122] | pterm[123] | pterm[124] | pterm[134] | 
   pterm[157]);
assign plaDcuOp[2] = (pterm[50] | pterm[68] | pterm[74] | pterm[79] | pterm[88] | 
   pterm[93] | pterm[101] | pterm[116] | pterm[118] | pterm[119] | pterm[127] | 
   pterm[129] | pterm[140] | pterm[152]);
assign plaDcuOp[3] = (pterm[99] | pterm[100]);
assign plaDcuOp[4] = (pterm[63]);
assign plaDcuOp[5] = (pterm[62]);
assign plaDcuOp[6] = (pterm[112]);
assign plaDcuOp[7] = (pterm[110]);
assign plaDcuOp[8] = (pterm[104]);
assign plaDcuOp[9] = (pterm[102]);
assign plaDcuOp[10] = (pterm[108]);
assign plaDcuOp[11] = (pterm[98]);
assign plaMmuCode[0] = (pterm[23]);
assign plaMmuCode[1] = (pterm[32] | pterm[50] | pterm[62] | pterm[63] | pterm[68] | 
   pterm[74] | pterm[79] | pterm[83] | pterm[87] | pterm[88] | pterm[89] | pterm[90] | 
   pterm[93] | pterm[95] | pterm[99] | pterm[100] | pterm[101] | pterm[102] | 
   pterm[104] | pterm[105] | pterm[108] | pterm[110] | pterm[111] | pterm[112] | 
   pterm[114] | pterm[115] | pterm[116] | pterm[118] | pterm[119] | pterm[120] | 
   pterm[122] | pterm[124] | pterm[146] | pterm[149] | pterm[152] | pterm[155] | 
   pterm[157]);
assign plaMmuCode[2] = (pterm[50] | pterm[62] | pterm[63] | pterm[68] | pterm[74] | 
   pterm[79] | pterm[83] | pterm[87] | pterm[88] | pterm[89] | pterm[90] | pterm[93] | 
   pterm[95] | pterm[99] | pterm[100] | pterm[101] | pterm[102] | pterm[104] | 
   pterm[105] | pterm[108] | pterm[110] | pterm[111] | pterm[112] | pterm[114] | 
   pterm[115] | pterm[116] | pterm[118] | pterm[119] | pterm[120] | pterm[122] | 
   pterm[124] | pterm[146] | pterm[149] | pterm[152] | pterm[155] | pterm[157]);
assign plaMmuCode[3] = (pterm[50] | pterm[63] | pterm[68] | pterm[74] | pterm[79] | 
   pterm[83] | pterm[87] | pterm[88] | pterm[90] | pterm[93] | pterm[95] | pterm[101] | 
   pterm[102] | pterm[104] | pterm[105] | pterm[108] | pterm[110] | pterm[111] | 
   pterm[112] | pterm[114] | pterm[115] | pterm[116] | pterm[118] | pterm[119] | 
   pterm[120] | pterm[122] | pterm[124] | pterm[146] | pterm[149] | pterm[152] | 
   pterm[155] | pterm[157]);
assign plaMmuCode[4] = (pterm[21]);
assign plaMmuCode[5] = (pterm[13]);
assign plaMmuCode[6] = (pterm[27]);
assign PCL_dcdHotCIn = (pterm[51] | pterm[75] | pterm[96] | pterm[107] | pterm[130] | 
   pterm[138] | pterm[142]);
assign PCL_dcdXerCa = (pterm[117] | pterm[121]);
assign plaOeCk = (pterm[25] | pterm[36] | pterm[37] | pterm[41] | pterm[48] | pterm[55] | 
   pterm[66] | pterm[96] | pterm[106] | pterm[107] | pterm[117] | pterm[121]);
assign plaXerCaEn = (pterm[15] | pterm[65] | pterm[121] | pterm[138] | pterm[151]);
assign plaMtspr = (pterm[43] | pterm[80]);
assign plaMfspr = (pterm[77] | pterm[113]);
assign plaMtdcr = (pterm[49]);
assign plaMfdcr = (pterm[81]);
assign plaWrExtEn = (pterm[60] | pterm[71]);
assign plaWrtee = (pterm[60]);
assign accTyp = (pterm[83] | pterm[87] | pterm[89] | pterm[90] | pterm[95] | pterm[99] | 
   pterm[100] | pterm[105] | pterm[108] | pterm[110] | pterm[111] | pterm[112] | 
   pterm[114] | pterm[115] | pterm[120] | pterm[122] | pterm[123] | pterm[124] | 
   pterm[134] | pterm[157]);
assign plaLwarx = (pterm[114]);
assign plaStwcx = (pterm[50]);
assign plaMrSel = (pterm[8] | pterm[48] | pterm[55]);
assign plaMdSel = (pterm[0] | pterm[6] | pterm[12]);
assign plaNegMac = (pterm[0] | pterm[25]);
assign plaGateZeroToAccReg = (pterm[12] | pterm[20] | pterm[66] | pterm[72] | 
   pterm[147]);
assign plaMacSat = (pterm[2] | pterm[3] | pterm[4] | pterm[5]);
assign plaForceAlgn = (pterm[22] | pterm[24] | pterm[101] | pterm[105]);
assign plaApuDiv = (pterm[37]);
assign plaMtcrf = (pterm[61]);

endmodule
